// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../utils/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  MAN
  WOMAN
}

// User Model For authentication
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  birthDate DateTime
  genre     Genre
  review    Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  @@index([genre, createdAt, birthDate])
}

model Product {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String
  category    String
  subcategory String
  price       Float
  discount    Float?
  stock       Int
  media       Json // {Image: string[], model3d?: string}
  variants    Variant[]
  tags        String[]
  rating      Float
  reviews     Review[]
  businessId  String
  business    User      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  promoted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([category, subcategory, discount, price, stock, tags, rating, businessId, createdAt])
}

model Variant {
  id        String  @id @default(uuid())
  name      String
  price     Float?
  stock     Int?
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([price, stock])
}

model Review {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating       Int
  comment      String?
  helpfulvotes Int      @default(0)
  photoUrls    String[]
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  createdAt    DateTime @default(now())

  @@index([rating, helpfulvotes, createdAt])
}
